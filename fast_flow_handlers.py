"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–º –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import CURRENCY_SYMBOLS, ECR_SELL_RATE
from fast_flow_states import FastFlowState, FastFlowData
from fast_flow_config import FAST_FLOW_IMAGES, get_fast_flow_option
from fast_flow_keyboards import (
    get_fast_flow_currency_keyboard,
    get_fast_flow_amount_keyboard,
    get_fast_flow_confirmation_keyboard,
    get_fast_flow_control_keyboard
)
from fast_flow_utils import (
    calculate_fast_flow_data,
    process_day,
    format_fast_flow_confirmation,
    format_fast_flow_stats
)
from keyboards import get_simulators_menu

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞
fast_flow_router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞
@fast_flow_router.callback_query(F.data == "fast_flow")
async def start_fast_flow(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞. | Start the fast flow simulator."""
    await state.clear()
    await state.set_state(FastFlowState.selecting_currency)
    
    await callback.message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ë—ã—Å—Ç—Ä–æ–≥–æ –ü–æ—Ç–æ–∫–∞:*\n\n"
        "*Select the currency for the fast flow:*\n\n"
        "üëáüëáüëá",
        reply_markup=get_fast_flow_currency_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞
@fast_flow_router.callback_query(FastFlowState.selecting_currency, F.data.startswith("fastflow_currency_"))
async def process_fast_flow_currency_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞. | Processing the selection of the currency for the fast flow."""
    currency = callback.data.split("_")[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É
    await state.update_data(currency=currency)
    await state.set_state(FastFlowState.selecting_amount)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    image_path = FAST_FLOW_IMAGES.get(currency)
    if image_path:
        try:
            import os
            from aiogram.types import FSInputFile
            
            # –ü—Ä—è–º–æ–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            current_dir = os.path.dirname(os.path.abspath(__file__))
            full_image_path = os.path.join(current_dir, "..", image_path)
            print(f"Current directory: {current_dir}")
            print(f"Image path from config: {image_path}")
            print(f"Full image path: {full_image_path}")
            print(f"File exists: {os.path.exists(full_image_path)}")
            
            if os.path.exists(full_image_path):
                photo = FSInputFile(full_image_path)
                await callback.message.answer_photo(
                    photo=photo,
                    caption=f"*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª –ë—ã—Å—Ç—Ä–æ–≥–æ –ü–æ—Ç–æ–∫–∞ | Select the fast flow amount:  {CURRENCY_SYMBOLS[currency]}*\n\n"
                    "üëáüëáüëá",
                    reply_markup=get_fast_flow_amount_keyboard(currency),
                    parse_mode="Markdown"
                )
                print("Photo sent successfully")
                await callback.answer()
                return
            else:
                print(f"Image file not found at: {full_image_path}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                alt_path = os.path.join(current_dir, "images", f"fast_flow_{currency.lower()}.jpg")
                print(f"Trying alternative path: {alt_path}")
                if os.path.exists(alt_path):
                    photo = FSInputFile(alt_path)
                    await callback.message.answer_photo(
                        photo=photo,
                        caption=f"*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª –ë—ã—Å—Ç—Ä–æ–≥–æ –ü–æ—Ç–æ–∫–∞ | Select the fast flow amount:  {CURRENCY_SYMBOLS[currency]}*\n\n"
                        "üëáüëáüëá",
                        reply_markup=get_fast_flow_amount_keyboard(currency),
                        parse_mode="Markdown"
                    )
                    print("Photo sent successfully from alternative path")
                    await callback.answer()
                    return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
            import traceback
            print(traceback.format_exc())
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    print("Falling back to text-only message")
    await callback.message.answer(
        f"*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª –ë—ã—Å—Ç—Ä–æ–≥–æ –ü–æ—Ç–æ–∫–∞ | Select the fast flow amount:  {CURRENCY_SYMBOLS[currency]}*\n\n"
        "üëáüëáüëá",
        reply_markup=get_fast_flow_amount_keyboard(currency),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–∏–Ω–∞–ª–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞
@fast_flow_router.callback_query(FastFlowState.selecting_amount, F.data.startswith("fastflow_amount_"))
async def process_fast_flow_amount_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–∏–Ω–∞–ª–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞. | Processing the selection of the fast flow amount."""
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    _, _, currency, amount_str = callback.data.split("_")
    amount = float(amount_str)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞
    flow_data = calculate_fast_flow_data(currency, amount)
    if not flow_data:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞
    await state.update_data(flow_data=flow_data)
    await state.set_state(FastFlowState.confirming_amount)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    message_text = format_fast_flow_confirmation(flow_data)
    
    await callback.message.answer(
        message_text,
        reply_markup=get_fast_flow_confirmation_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–∏–Ω–∞–ª–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞
@fast_flow_router.callback_query(FastFlowState.confirming_amount, F.data == "fastflow_confirm")
async def confirm_fast_flow(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞. | Confirmation of the amount and start of the fast flow simulation."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    flow_data = data.get("flow_data")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –¥–Ω—é —Å–∏–º—É–ª—è—Ü–∏–∏
    flow_data = process_day(flow_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(flow_data=flow_data)
    await state.set_state(FastFlowState.viewing_flow)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ
    message_text = format_fast_flow_stats(flow_data)
    
    await callback.message.answer(
        message_text,
        reply_markup=get_fast_flow_control_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∏—Å–ª–∏—Ç—å" –≤ –±—ã—Å—Ç—Ä–æ–º –ø–æ—Ç–æ–∫–µ
@fast_flow_router.callback_query(FastFlowState.viewing_flow, F.data == "fastflow_next_day")
async def process_fast_flow_next_day(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é —Å–∏–º—É–ª—è—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞. | Transition to the next day of the fast flow simulation."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    flow_data = data.get("flow_data")
    
    # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if flow_data.completed:
        await callback.answer("–ë—ã—Å—Ç—Ä—ã–π –ø–æ—Ç–æ–∫ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω! | The fast flow is already completed!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é —Å–∏–º—É–ª—è—Ü–∏–∏
    flow_data = process_day(flow_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(flow_data=flow_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ
    message_text = format_fast_flow_stats(flow_data)
    
    # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if flow_data.completed:
        message_text += "\n\n‚úÖ –ë—ã—Å—Ç—Ä—ã–π –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! | The fast flow is completed!"
    
    await callback.message.answer(
        message_text,
        reply_markup=get_fast_flow_control_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã
@fast_flow_router.callback_query(F.data == "fastflow_back_to_currency")
async def back_to_currency_selection(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã. | Return to the currency selection."""
    current_state = await state.get_state()
    print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ | Current state: {current_state}, callback_data: {callback.data}")
    
    await state.set_state(FastFlowState.selecting_currency)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç
    if callback.message.text:
        await callback.message.answer(
            "*–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ë—ã—Å—Ç—Ä–æ–≥–æ –ü–æ—Ç–æ–∫–∞:*\n\n"
            "*Select the currency for the fast flow:*\n\n"
            "üëáüëáüëá",
            reply_markup=get_fast_flow_currency_keyboard(),
            parse_mode="Markdown"
        )
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "*–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ë—ã—Å—Ç—Ä–æ–≥–æ –ü–æ—Ç–æ–∫–∞:*\n\n"
            "*Select the currency for the fast flow:*\n\n"
            "üëáüëáüëá",
            reply_markup=get_fast_flow_currency_keyboard(),
            parse_mode="Markdown"
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –Ω–æ–º–∏–Ω–∞–ª–∞
@fast_flow_router.callback_query(FastFlowState.confirming_amount, F.data == "fastflow_back_to_amount")
async def back_to_amount_selection(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –Ω–æ–º–∏–Ω–∞–ª–∞. | Return to the amount selection."""
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    currency = data.get("currency")
    
    await state.set_state(FastFlowState.selecting_amount)
    
    await callback.message.answer(
        f"*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª –ë—ã—Å—Ç—Ä–æ–≥–æ –ü–æ—Ç–æ–∫–∞ | Select the fast flow amount:  {CURRENCY_SYMBOLS[currency]}*\n\n"
        "üëáüëáüëá",
        reply_markup=get_fast_flow_amount_keyboard(currency),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–Ω–æ–≤–æ"
@fast_flow_router.callback_query(F.data == "fastflow_restart")
async def restart_fast_flow(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞. | Restart the fast flow simulator."""
    await state.clear()
    await state.set_state(FastFlowState.selecting_currency)
    
    await callback.message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ë—ã—Å—Ç—Ä–æ–≥–æ –ü–æ—Ç–æ–∫–∞:*\n\n"
        "*Select the currency for the fast flow:*\n\n"
        "üëáüëáüëá",
        reply_markup=get_fast_flow_currency_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤
@fast_flow_router.callback_query(F.data == "back_to_simulators")
async def back_to_simulators(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤. | Return to the simulators menu."""
    await state.clear()
    
    await callback.message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º—É–ª—è—Ç–æ—Ä:*\n\n"
        "*Select the simulator:*\n\n"
        "üëáüëáüëá",
        reply_markup=get_simulators_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã –∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–∏–Ω–∞–ª–∞
@fast_flow_router.callback_query(FastFlowState.selecting_amount, F.data == "fastflow_back_to_currency")
async def back_to_currency_from_amount(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã –∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–∏–Ω–∞–ª–∞. | Return to the currency selection from the amount selection screen."""
    await state.set_state(FastFlowState.selecting_currency)
    
    await callback.message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ë—ã—Å—Ç—Ä–æ–≥–æ –ü–æ—Ç–æ–∫–∞:*\n\n"
        "*Select the currency for the fast flow:*\n\n"
        "üëáüëáüëá",
        reply_markup=get_fast_flow_currency_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer() 
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import CURRENCY_SYMBOLS
from accumulative_flow_states import AccumulativeFlowState, AccumulativeFlowData
from accumulative_flow_keyboards import (
    get_accumulative_flow_currency_keyboard,
    get_accumulative_flow_period_keyboard,
    get_accumulative_flow_control_keyboard
)
from accumulative_flow_utils import (
    calculate_accumulative_flow_data,
    format_accumulative_flow_result
)
from keyboards import get_simulators_menu

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
accumulative_flow_router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
@accumulative_flow_router.callback_query(F.data == "savings_calculator")
async def start_accumulative_flow(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞."""
    await state.clear()
    await state.set_state(AccumulativeFlowState.selecting_currency)
    
    await callback.message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ü–æ—Ç–æ–∫–∞:*\n\n"
        "*Select the currency for the Accumulation Flow:*\n\n"
        "üëáüëáüëá",
        reply_markup=get_accumulative_flow_currency_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
@accumulative_flow_router.callback_query(AccumulativeFlowState.selecting_currency, F.data.startswith("accflow_currency_"))
async def process_accumulative_flow_currency_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞."""
    currency = callback.data.split("_")[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É
    await state.update_data(currency=currency)
    await state.set_state(AccumulativeFlowState.entering_amount)
    
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ü–æ—Ç–æ–∫–∞\n\n"
        f"*–¶–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –æ—Ç 1000 –¥–æ 100000*\n\n"
        f"üëáüëáüëá",
        parse_mode="Markdown"

    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
@accumulative_flow_router.message(AccumulativeFlowState.entering_amount)
async def process_accumulative_flow_amount_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
        amount = float(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if amount < 1000 or amount > 100000:
            await message.answer(
                f"*–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1000 –¥–æ 100000. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:*",
                parse_mode="Markdown"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É
        await state.update_data(amount=amount)
        await state.set_state(AccumulativeFlowState.selecting_period)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.get_data()
        currency = data.get("currency")
        
        await message.answer(
            f"*–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ü–æ—Ç–æ–∫–∞ {CURRENCY_SYMBOLS[currency]}*\n\n"
            f"*Select the period for the Accumulation Flow {CURRENCY_SYMBOLS[currency]}*\n\n"
            "üëáüëáüëá",
            reply_markup=get_accumulative_flow_period_keyboard(),
            parse_mode="Markdown"
        )
    except ValueError:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ
        await message.answer(
            f"*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤:*",
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
@accumulative_flow_router.callback_query(AccumulativeFlowState.selecting_period, F.data.startswith("accflow_period_"))
async def process_accumulative_flow_period_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞."""
    # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback_data
    period_years = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    currency = data.get("currency")
    amount = data.get("amount")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞
    flow_data = calculate_accumulative_flow_data(currency, amount, period_years)
    if not flow_data:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await state.set_state(AccumulativeFlowState.viewing_result)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    message_text = format_accumulative_flow_result(flow_data)
    
    await callback.message.answer(
        message_text,
        reply_markup=get_accumulative_flow_control_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–Ω–æ–≤–æ"
@accumulative_flow_router.callback_query(F.data == "accflow_restart")
async def restart_accumulative_flow(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞."""
    await state.clear()
    await state.set_state(AccumulativeFlowState.selecting_currency)
    
    await callback.message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ü–æ—Ç–æ–∫–∞:*\n\n"
        "*Select the currency for the Accumulation Flow:*\n\n"
        "üëáüëáüëá",
        reply_markup=get_accumulative_flow_currency_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã
@accumulative_flow_router.callback_query(AccumulativeFlowState.selecting_period, F.data == "accflow_back_to_amount")
async def back_to_amount_input(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã. | Return to the amount input."""
    await state.set_state(AccumulativeFlowState.entering_amount)
    
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ü–æ—Ç–æ–∫–∞\n\n"
        f"*–¶–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –æ—Ç 1000 –¥–æ 100000*\n\n"
        f"üëáüëáüëá",
        parse_mode="Markdown"

        f"Enter the amount of the Accumulation Flow\n\n"
        f"Without spaces from 1000 to 100000\n\n"
        f"üëáüëáüëá"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤
@accumulative_flow_router.callback_query(F.data == "back_to_simulators")
async def back_to_simulators(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤. | Return to the simulators menu."""
    await state.clear()
    
    await callback.message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º—É–ª—è—Ç–æ—Ä:*\n\n"
        "*Choose the simulator:*\n\n"
        "üëáüëáüëá",
        reply_markup=get_simulators_menu(),
        parse_mode="Markdown"
    )
    await callback.answer() 
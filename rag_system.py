import os
from typing import List, Dict, Any, Optional
import numpy as np
import faiss
from sentence_transformers import SentenceTransformer
import pickle
import json
import google.generativeai as genai
from dotenv import load_dotenv
import logging
import time
import random
import re

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API-–∫–ª—é—á–∞
if not os.getenv("GOOGLE_API_KEY"):
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω GOOGLE_API_KEY. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª")

# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
VECTOR_DB_PATH = "vector_db"
MODEL_NAME = "all-MiniLM-L6-v2"  # –ú–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
GEMINI_MODEL = "gemini-1.5-flash"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 1.5-flash (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è) –∏–ª–∏ 1.5-pro, –∏–ª–∏ 1.0-pro

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini API
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# –ü—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω—ã
SYSTEM_PROMPT = """
–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞ PotokCash, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è –≤ —Å—Ç–∏–ª–µ –ª–∏–¥–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: –ø—Ä–æ—Å—Ç–æ, –∏—Å–∫—Ä–µ–Ω–Ω–µ, —Å –¥—É—Ö–æ–≤–Ω—ã–º –ø–æ—Å—ã–ª–æ–º.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–Ω—è—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞.

–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤:
{context}

–í—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏—Å—å –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ç–æ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, 
–ø—Ä–µ–¥–ª–æ–∂–∏ –µ–º—É –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤:

–ú–û–Ø 1-—è –õ–ò–ù–ò–Ø –ò –õ–ò–ß–ù–û–ï –°–û–ü–†–û–í–û–ñ–î–ï–ù–ò–ï –ù–ê –í–°–ï–• –ü–õ–ê–¢–§–û–†–ú–ê–• üëáüòâ

‚ÄºÔ∏è–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ –≤–∫–ª. VPN üëá

üá∑üá∫ –†–§ –∏ –°–ù–ì ‚Äî https://potok.cash/ref/HPLTzKyq
üá™üá∫ EURO ‚Äî https://eur.cashflow.fund/ref/ncPTzKyq
üá™üá∏ –ò—Å–ø–∞–Ω–∏—è ‚Äî https://es.cashflow.fund/ref/nmbTzKyq
üáµüá± –ü–æ–ª—å—à–∞ ‚Äî https://pl.cashflow.fund/ref/3sHTzKyq
üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω ‚Äî https://cashflow-kg.fund/ref/XsPTzKyq
üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è ‚Äî https://gb.cashflow.fund/ref/XZbTzKyq
üá®üá≥ –ö–∏—Ç–∞–π ‚Äî https://cn.cashflow.fund/ref/XsbTzKyq

–°–í–Ø–ó–ê–¢–¨–°–Ø –ò –ü–û–û–ë–©–ê–¢–¨–°–Ø –° –î–ï–ô–°–¢–í–£–Æ–©–ò–ú –õ–ò–î–ï–†–û–ú –í–ê–°–ò–õ–ò–ï–ú –ú–ê–¢–£–°–ï–í–ò–ß - –¢–ï–õ–ï–ì–†–ê–ú ‚Äî https://t.me/konvict171

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—Å–∞–∏–ª–∏–∏ –ú—É—Ç—É—Å–µ–≤–∏—á —Ç–æ –µ–≥–æ —Ñ–∞–º–∏–ª–∏—è –Ω–µ —Å–∫–ª–æ–Ω—è–µ—Ç—Å—è

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ä–∞—Å—á–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ —Ö–æ—á–µ—Ç –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, 
–ø—Ä–µ–¥–ª–æ–∂–∏ –µ–º—É –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞–º–∏ –≤ –±–æ—Ç–µ (–∫–Ω–æ–ø–∫–∞ "üéÆ –°–ò–ú–£–õ–Ø–¢–û–†–´ | SIMULATORS" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é).
"""

OBJECTION_PROMPT = """
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Å–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ: "{query}"
–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ–º:
{context}

–û—Ç–≤–µ—á–∞–π –∏—Å–∫—Ä–µ–Ω–Ω–µ, —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä—è—Å–Ω—è—è –æ—à–∏–±–æ—á–Ω–æ—Å—Ç—å –æ–ø–∞—Å–µ–Ω–∏–π.
–ü—Ä–∏–≤–µ–¥–∏ —Ñ–∞–∫—Ç—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–æ–≤–µ—Ä–≥–∞—é—Ç –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ.
"""

class DialogHistory:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    
    def __init__(self, max_history: int = 5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.
        
        Args:
            max_history: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        """
        self.messages = []
        self.max_history = max_history
    
    def add_message(self, role: str, content: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é.
        
        Args:
            role: –†–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ('user' –∏–ª–∏ 'assistant')
            content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        self.messages.append({"role": role, "content": content})
        
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(self.messages) > self.max_history * 2:  # * 2, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ - —ç—Ç–æ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
            self.messages = self.messages[-self.max_history * 2:]
    
    def get_history_text(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.
        
        Returns:
            –¢–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        """
        history_text = ""
        for message in self.messages:
            prefix = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " if message["role"] == "user" else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: "
            history_text += f"{prefix}{message['content']}\n\n"
        
        return history_text.strip()

class RAGAssistant:
    """
    RAG-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç RAG-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        self.model = SentenceTransformer(MODEL_NAME)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
        if not os.path.exists(VECTOR_DB_PATH):
            raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î –≤ {VECTOR_DB_PATH}. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏.")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        with open(os.path.join(VECTOR_DB_PATH, "model_info.json"), "r") as f:
            self.model_info = json.load(f)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º FAISS –∏–Ω–¥–µ–∫—Å
        self.index = faiss.read_index(os.path.join(VECTOR_DB_PATH, "faiss_index.bin"))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        with open(os.path.join(VECTOR_DB_PATH, "documents.pkl"), "rb") as f:
            documents_data = pickle.load(f)
            self.texts = documents_data["texts"]
            self.metadatas = documents_data["metadatas"]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini
        self.gemini_model = genai.GenerativeModel(GEMINI_MODEL)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        self.dialog_histories = {}
    
    def get_user_history(self, user_id: str) -> DialogHistory:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é.
        
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id not in self.dialog_histories:
            self.dialog_histories[user_id] = DialogHistory()
        
        return self.dialog_histories[user_id]
    
    def create_embedding(self, text: str) -> np.ndarray:
        """
        –°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é SentenceTransformers.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
            
        Returns:
            –≠–º–±–µ–¥–¥–∏–Ω–≥ –≤ –≤–∏–¥–µ numpy-–º–∞—Å—Å–∏–≤–∞
        """
        embedding = self.model.encode([text])[0]
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
        faiss.normalize_L2(np.array([embedding], dtype=np.float32))
        return embedding
    
    def retrieve(self, query: str, k: int = 5) -> List[Dict[str, Any]]:
        """
        –ò—â–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É.
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        query_embedding = self.create_embedding(query)
        
        # –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
        scores, indices = self.index.search(np.array([query_embedding], dtype=np.float32), k=k)
        
        results = []
        for i, (score, idx) in enumerate(zip(scores[0], indices[0])):
            if idx < 0 or idx >= len(self.texts):
                continue  # –ò–Ω–æ–≥–¥–∞ FAISS –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ—Å–µ–¥–µ–π
            
            results.append({
                "text": self.texts[idx],
                "metadata": self.metadatas[idx],
                "score": float(score)
            })
        
        return results
    
    def is_objection(self, query: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ–º.
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Ö–æ–∂ –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ, –∏–Ω–∞—á–µ False
        """
        objection_keywords = [
            "–ø–∏—Ä–∞–º–∏–¥–∞", "—Å–∫–∞–º", "—Ä–∞–∑–≤–æ–¥", "–æ–±–º–∞–Ω", "–º–æ—à–µ–Ω–Ω–∏–∫", "–Ω–µ –≤–µ—Ä—é", "–ª–æ—Ö–æ—Ç—Ä–æ–Ω", 
            "ponzi", "scam", "fraud", "–æ–±–º–∞–Ω—É–ª–∏", "—Ö–∞–π–ø", "–º–ª–º", "mlm",
            "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–ø–æ—Ç–µ—Ä—è—é", "–¥–µ–Ω—å–≥–∏ –ø—Ä–æ–ø–∞–¥—É—Ç", "—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ",
            "–Ω–µ–ª–µ–≥–∞–ª—å–Ω–æ", "–∑–∞–ø—Ä–µ—â–µ–Ω–æ", "—É–∂–µ –±—ã–ª –≤"
        ]
        
        query_lower = query.lower()
        return any(keyword in query_lower for keyword in objection_keywords)
    
    def generate_prompt(self, query: str, context: List[Dict[str, Any]], 
                        user_info: Optional[Dict[str, Any]] = None,
                        history: Optional[DialogHistory] = None,
                        is_first_message: bool = False) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            is_first_message: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            
        Returns:
            –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context_str = ""
        for i, doc in enumerate(context):
            source = doc["metadata"]["source"].replace("_", " ")
            context_str += f"### {source}: \n{doc['text']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        user_info_str = ""
        if user_info:
            user_name = user_info.get("name", "–£—á–∞—Å—Ç–Ω–∏–∫")
            user_info_str = f"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
- –ò–º—è: {user_name}
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        history_str = ""
        if history and history.messages:
            history_str = f"""
–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
{history.get_history_text()}
"""
        
        # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        if self.is_objection(query):
            prompt_template = OBJECTION_PROMPT
        else:
            prompt_template = SYSTEM_PROMPT
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = prompt_template.format(
            context=context_str,
            query=query
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        if user_info_str or history_str:
            prompt = f"{user_info_str}\n{history_str}\n{prompt}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –≤–æ–ø—Ä–æ—Å
        prompt += f"\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –ø–µ—Ä–≤–æ–µ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_first_message:
            prompt += "\n–≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ. –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∫–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞ PotokCash.\n"
        else:
            prompt += "\n–≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞. –ù–ï –ü–†–ò–í–ï–¢–°–¢–í–£–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.\n"
        
        return prompt
    
    def answer_query(self, query: str, user_info: Optional[Dict[str, Any]] = None, user_id: Optional[str] = None) -> str:
        """
        –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG-–ø–æ–¥—Ö–æ–¥–∞.
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∏–º—è, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏ —Ç.–¥.)
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å user_id
        history = self.get_user_history(user_id) if user_id else None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –¥–∏–∞–ª–æ–≥–µ
        is_first_message = history is None or len(history.messages) == 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –í–∞—Å–∞–¥–∏–Ω–µ
        if is_vasadin_query(query):
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –í–∞—Å–∞–¥–∏–Ω–µ
            vasadin_search_query = "–î–º–∏—Ç—Ä–∏–π –í–∞—Å–∞–¥–∏–Ω –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –í–∞—Å–∞–¥–∏–Ω–µ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            vasadin_docs = self.retrieve(vasadin_search_query, k=3)
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ –í–∞—Å–∞–¥–∏–Ω–µ
            vasadin_prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –î–º–∏—Ç—Ä–∏–∏ –í–∞—Å–∞–¥–∏–Ω–µ, –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–æ–µ–∫—Ç–∞ PotokCash.
–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞:
{self._format_context(vasadin_docs)}

–í–∞–∂–Ω–æ:
1. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏, —á—Ç–æ –î–º–∏—Ç—Ä–∏–π –í–∞—Å–∞–¥–∏–Ω - –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ PotokCash (–ü–æ—Ç–æ–∫ –ö–µ—à) –∏ –∫–æ–º–ø–∞–Ω–∏–∏ –ú–µ—Ä–∫—É—Ä–∏–π
2. –û–±—ä—è—Å–Ω–∏, —Å –∫–∞–∫–æ–π —Ü–µ–ª—å—é –æ–Ω —Å–æ–∑–¥–∞–ª –ø—Ä–æ–µ–∫—Ç
3. –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–µ, —É–∫–∞–∂–∏ –µ—ë
4. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}
"""
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Gemini
            try:
                response = self.gemini_model.generate_content(vasadin_prompt)
                vasadin_response = response.text
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
                if user_id:
                    history.add_message("user", query)
                    history.add_message("assistant", vasadin_response)
                
                return vasadin_response
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ –í–∞—Å–∞–¥–∏–Ω–µ: {e}")
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
                fallback_response = "–î–º–∏—Ç—Ä–∏–π –í–∞—Å–∞–¥–∏–Ω ‚Äî –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ PotokCash (–ü–æ—Ç–æ–∫ –ö–µ—à) –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ú–µ—Ä–∫—É—Ä–∏–π. –û–Ω —Å–æ–∑–¥–∞–ª —ç—Ç—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å —Ü–µ–ª—å—é –¥–∞—Ç—å –ª—é–¥—è–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏—á—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –ï–≥–æ Telegram-–∫–∞–Ω–∞–ª: https://t.me/kodvasadin"
                
                if user_id:
                    history.add_message("user", query)
                    history.add_message("assistant", fallback_response)
                
                return fallback_response
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        if is_referral_request(query):
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            relevant_docs = self.retrieve(query)
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            registration_prompt = f"""
–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞ PotokCash. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ.
–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞:
{self._format_context(relevant_docs)}

–ó–∞–¥–∞—á–∞: –î–∞—Ç—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –æ—Ç–≤–µ—Ç –æ —Ç–æ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ.
–í–∞–∂–Ω–æ:
1. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ
2. –ü–æ–¥—á–µ—Ä–∫–Ω–∏, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–≤–∞ –ø—É—Ç–∏:
   - –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
   - –õ–∏—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –ª–∏–¥–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
3. –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç–∏–ª—å –ª–∏–¥–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: –ø—Ä–æ—Å—Ç–æ, –∏—Å–∫—Ä–µ–Ω–Ω–µ, —Å –¥—É—Ö–æ–≤–Ω—ã–º –ø–æ—Å—ã–ª–æ–º
4. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –≥–æ–≤–æ—Ä–∏ –æ—Ç —Å–µ—Ä–¥—Ü–∞

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}
"""
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            response = self.gemini_model.generate_content(registration_prompt)
            personalized_answer = response.text
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            referral_links = """
–ú–û–Ø 1-—è –õ–ò–ù–ò–Ø –ò –õ–ò–ß–ù–û–ï –°–û–ü–†–û–í–û–ñ–î–ï–ù–ò–ï –ù–ê –í–°–ï–• –ü–õ–ê–¢–§–û–†–ú–ê–• üëáüòâ

‚ÄºÔ∏è–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ –≤–∫–ª. VPN üëá

üá∑üá∫ –†–§ –∏ –°–ù–ì ‚Äî https://potok.cash/ref/HPLTzKyq
üá™üá∫ EURO ‚Äî https://eur.cashflow.fund/ref/ncPTzKyq
üá™üá∏ –ò—Å–ø–∞–Ω–∏—è ‚Äî https://es.cashflow.fund/ref/nmbTzKyq
üáµüá± –ü–æ–ª—å—à–∞ ‚Äî https://pl.cashflow.fund/ref/3sHTzKyq
üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω ‚Äî https://cashflow-kg.fund/ref/XsPTzKyq
üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è ‚Äî https://gb.cashflow.fund/ref/XZbTzKyq
üá®üá≥ –ö–∏—Ç–∞–π ‚Äî https://cn.cashflow.fund/ref/XsbTzKyq

–°–í–Ø–ó–ê–¢–¨–°–Ø –ò –ü–û–û–ë–©–ê–¢–¨–°–Ø –° –î–ï–ô–°–¢–í–£–Æ–©–ò–ú –õ–ò–î–ï–†–û–ú –í–ê–°–ò–õ–ò–ï–ú –ú–ê–¢–£–°–ï–í–ò–ß - –¢–ï–õ–ï–ì–†–ê–ú ‚Äî https://t.me/konvict171
"""
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            final_answer = f"{personalized_answer}\n\n{referral_links}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            if user_id:
                history.add_message("user", query)
                history.add_message("assistant", final_answer)
            
            return final_answer

        if is_calculation_request(query):
            return """–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, 
—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞–º–∏. –û–Ω–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º:
- –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
- –°–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –£–≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
- –ü–æ–Ω—è—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–æ—Ç–æ–∫–∞

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üéÆ –°–ò–ú–£–õ–Ø–¢–û–†–´ | SIMULATORS" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç—ã."""

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        relevant_docs = self.retrieve(query)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, –ø–µ—Ä–≤–æ–µ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        prompt = self.generate_prompt(query, relevant_docs, user_info, history, is_first_message)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Gemini —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        max_retries = 3
        retry_count = 0
        backoff_time = 1  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        while retry_count < max_retries:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API
                response = self.gemini_model.generate_content(prompt)
                answer = response.text
                
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                if not is_first_message:
                    # –®–∞–±–ª–æ–Ω—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    greetings = [
                        r"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.*?\n\n",
                        r"–ü—Ä–∏–≤–µ—Ç.*?\n\n",
                        r"–î–æ–±—Ä—ã–π –¥–µ–Ω—å.*?\n\n",
                        r"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ.*?\n\n",
                        r"–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä.*?\n\n"
                    ]
                    
                    for greeting in greetings:
                        answer = re.sub(greeting, "", answer, flags=re.IGNORECASE | re.DOTALL)
                
                break  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            except Exception as e:
                retry_count += 1
                error_message = str(e)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                logging.error(f"–ü–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API Gemini: {error_message}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                if retry_count == max_retries:
                    logging.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API.")
                    answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
                    break
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                jitter = random.uniform(0, 0.1 * backoff_time)  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
                wait_time = backoff_time + jitter
                logging.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.2f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(wait_time)
                backoff_time *= 2  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ 2 —Ä–∞–∑–∞
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å user_id, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        if user_id and "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã" not in answer:
            history.add_message("user", query)
            history.add_message("assistant", answer)
        
        return answer

    def _format_context(self, docs: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞."""
        context_str = ""
        for i, doc in enumerate(docs):
            source = doc["metadata"]["source"].replace("_", " ")
            context_str += f"### {source}: \n{doc['text']}\n\n"
        return context_str

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –í–∞—Å–∞–¥–∏–Ω–µ
def is_vasadin_query(query: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –î–º–∏—Ç—Ä–∏–∏ –í–∞—Å–∞–¥–∏–Ω–µ."""
    vasadin_keywords = [
        "–≤–∞—Å–∞–¥–∏–Ω", "–¥–º–∏—Ç—Ä–∏–π –≤–∞—Å–∞–¥–∏–Ω", "–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å", "—Å–æ–∑–¥–∞—Ç–µ–ª—å", "–¥–º–∏—Ç—Ä–∏–π", 
        "–∫—Ç–æ —Ç–∞–∫–æ–π –≤–∞—Å–∞–¥–∏–Ω", "–≤–∞—Å–∞–¥–∏–Ω –∫—Ç–æ", "–∫—Ç–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å", "–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞",
        "—Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞", "–∫—Ç–æ —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å"
    ]
    query_lower = query.lower()
    return any(keyword in query_lower for keyword in vasadin_keywords)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–∫–∞—Ö
def is_referral_request(query: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Å—å–±–æ–π –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    referral_keywords = [
        "—Ä–µ—Ñ–µ—Ä–∞–ª", "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è", "—Å—Å—ã–ª–∫–∞", "—Å—Å—ã–ª–∫–∏", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        "–Ω–∞—á–∞—Ç—å", "—Å—Ç–∞—Ä—Ç", "–∫–∞–∫ –Ω–∞—á–∞—Ç—å", "–∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É",
        "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å", "–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", "–ø—Ä–∏–≥–ª–∞—Å–∏", "–ø—Ä–∏–≥–ª–∞—à–∞–π"
    ]
    query_lower = query.lower()
    return any(keyword in query_lower for keyword in referral_keywords)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö
def is_calculation_request(query: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Å—å–±–æ–π –æ —Ä–∞—Å—á–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø–æ—Ç–æ–∫–∞—Ö."""
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ —Ä–∞—Å—á–µ—Ç–µ
    calculation_keywords = [
        "–ø–æ—Å—á–∏—Ç–∞—Ç—å", "—Ä–∞—Å—á–µ—Ç", "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å", "—Å–∫–æ–ª—å–∫–æ", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–¥–æ—Ö–æ–¥",
        "–ø—Ä–∏–±—ã–ª—å", "–≤—ã–≥–æ–¥–∞", "–≤—ã–≥–æ–¥–Ω–æ", "–≤—ã–≥–æ–¥–Ω–µ–µ", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–∫–∞–ª—å–∫—É–ª—è—Ü–∏—è"
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ—Ç–æ–∫–∞–º–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º
    flow_keywords = [
        "–ø–æ—Ç–æ–∫", "–ø–æ—Ç–æ–∫–∏", "–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", "–¥–æ—Ö–æ–¥", "–¥–µ–Ω—å–≥–∏", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", 
        "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "–≤–ª–æ–∂–∏—Ç—å", "–≤–ª–æ–∂–µ–Ω–∏—è", "–ø—Ä–æ—Ü–µ–Ω—Ç", "–ø—Ä–æ—Ü–µ–Ω—Ç—ã"
    ]
    
    query_lower = query.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö
    has_calculation_keyword = any(keyword in query_lower for keyword in calculation_keywords)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ –æ –ø–æ—Ç–æ–∫–∞—Ö –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–µ
    has_flow_keyword = any(keyword in query_lower for keyword in flow_keywords)
    
    # –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏ —Å–ª–æ–≤–∞ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö, –∏ —Å–ª–æ–≤–∞ –æ –ø–æ—Ç–æ–∫–∞—Ö/–∑–∞—Ä–∞–±–æ—Ç–∫–µ
    return has_calculation_keyword and has_flow_keyword

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    assistant = RAGAssistant()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Ä–∞—Å—Ç—É—â–µ–º –ø–æ—Ç–æ–∫–µ"
    user_info = {
        "name": "–ï–≤–≥–µ–Ω–∏–π",
        "referral_link": "https://potok.cash/ref/12345"
    }
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    user_id = "test_user_123"
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    response1 = assistant.answer_query(query, user_info, user_id)
    print(f"–í–æ–ø—Ä–æ—Å 1: {query}")
    print(f"–û—Ç–≤–µ—Ç 1: {response1}")
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (—Å –∏—Å—Ç–æ—Ä–∏–µ–π)
    query2 = "–ê –∫–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞?"
    response2 = assistant.answer_query(query2, user_info, user_id)
    print(f"\n–í–æ–ø—Ä–æ—Å 2: {query2}")
    print(f"–û—Ç–≤–µ—Ç 2: {response2}")
    
    # –¢—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å (–≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ)
    query3 = "–≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–∏—Ä–∞–º–∏–¥—É, —Ä–∞–∑–≤–µ –Ω–µ—Ç?"
    response3 = assistant.answer_query(query3, user_info, user_id)
    print(f"\n–í–æ–ø—Ä–æ—Å 3: {query3}")
    print(f"–û—Ç–≤–µ—Ç 3: {response3}") 
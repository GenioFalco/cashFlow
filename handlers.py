import json
import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config import MIN_AMOUNT, MAX_AMOUNT, CURRENCY_SYMBOLS, CURRENCY_RATES, CURRENCY_LIMITS, CURRENCY_NAMES, ECR_PURCHASE_RATE, CURRENCY_FLAGS, ECR_BUY_RATE, ECR_SELL_RATE, ECR_ACCUMULATIVE_BUY_RATE
from currency_rates import get_ecr_rub_rate, get_ecr_rate, get_cbr_currency_rates, get_ecr_count_for_amount
from keyboards import (
    get_main_menu,
    get_currency_menu,
    get_confirm_amount_keyboard,
    get_flow_control_keyboard,
    get_flow_control_with_withdraw_keyboard,
    get_simulators_menu,
    get_currency_keyboard,
    get_money_flows_menu
)
from fast_flow_keyboards import get_fast_flow_currency_keyboard
from states import GrowingFlowState, FlowData
from utils import (
    calculate_flow_data,
    add_income_to_savings,
    withdraw_savings,
    add_funds_to_flow,
    format_flow_message,
    format_confirmation_message,
    format_daily_stats,
    convert_to_rub,
    convert_from_rub,
    get_bonus_percent
)

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    user_name = message.from_user.first_name if message.from_user and message.from_user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_id = message.from_user.id if message.from_user else None
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        from broadcast_handlers import add_user_to_db
        add_user_to_db(
            user_id=user_id,
            username=message.from_user.username if message.from_user else None,
            first_name=message.from_user.first_name if message.from_user else None,
            last_name=message.from_user.last_name if message.from_user else None,
            chat_id=message.chat.id
        )
    except ImportError:
        pass
    
    await message.answer(
        f"{user_name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ü§ù –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å–∏–ª–∏–π. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –º–µ–Ω—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç–µ –≤–≤–µ—Ä—Ö—É, —á—Ç–æ –±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ\n\n"
        f"üëáüëáüëá",
        reply_markup=get_main_menu(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    user_name = callback.from_user.first_name if callback.from_user and callback.from_user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_id = callback.from_user.id if callback.from_user else None
    
    await state.clear()
    await callback.message.answer(
        f"{user_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ\n\n"
        f"üëáüëáüëá",
        reply_markup=get_main_menu(user_id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ò–ú–£–õ–Ø–¢–û–†–´"
@router.callback_query(F.data == "simulators")
async def show_simulators(callback: CallbackQuery):
    await callback.message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º—É–ª—è—Ç–æ—Ä:*\n\n"
        "*Select a simulator:*\n\n"
        "üëáüëáüëá",
        reply_markup=get_simulators_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ò–ú–£–õ–Ø–¢–û–† –†–ê–°–¢–£–©–ï–ì–û –ü–û–¢–û–ö–ê"
@router.callback_query(F.data == "growing_flow")
async def start_growing_flow(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GrowingFlowState.selecting_currency)
    await callback.message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —Ä–∞—Å—Ç—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞:*\n\n"
        "*Select the currency for the growing flow simulator:*\n\n"
        "üëáüëáüëá",
        reply_markup=get_currency_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ò–ú–£–õ–Ø–¢–û–† –ë–´–°–¢–†–û–ì–û –ü–û–¢–û–ö–ê"
@router.callback_query(F.data == "fast_flow")
async def start_fast_flow(callback: CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –≤ fast_flow_handlers
    from fast_flow_handlers import start_fast_flow as fast_flow_start
    await fast_flow_start(callback, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
@router.callback_query(F.data.startswith("currency_"))
async def process_currency_selection(callback: CallbackQuery, state: FSMContext):
    currency = callback.data.split("_")[1]
    currency_name = CURRENCY_NAMES.get(currency, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ | unknown currency")
    currency_limits = CURRENCY_LIMITS[currency]
    min_amount = currency_limits["min"]
    max_amount = currency_limits["max"]
    currency_symbol = CURRENCY_SYMBOLS[currency]
    
    await state.update_data(currency=currency)
    await state.set_state(GrowingFlowState.entering_amount)
    
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {currency_name}. –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—É–º–º—É.\n"
        f"*–¶–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –æ—Ç: {min_amount} –¥–æ: {max_amount}{currency_symbol}*\n\n"
        f"You selected: {currency_name}. Enter the initial amount.\n"
        f"*In numbers without spaces from: {min_amount} to: {max_amount}{currency_symbol}*\n\n"
        f"üëáüëáüëá",
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@router.message(GrowingFlowState.entering_amount)
async def process_amount(message: Message, state: FSMContext):
    data = await state.get_data()
    currency = data.get("currency")
    currency_limits = CURRENCY_LIMITS[currency]
    min_amount = currency_limits["min"]
    max_amount = currency_limits["max"]
    currency_symbol = CURRENCY_SYMBOLS[currency]
    
    try:
        amount = float(message.text.strip().replace(" ", ""))
    except ValueError:
        await message.answer(
            f"*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –æ—Ç {min_amount} –¥–æ {max_amount}{currency_symbol}*\n\n"
            f"*Please enter a valid number without spaces from: {min_amount} to: {max_amount}{currency_symbol}*\n\n"
            f"üëáüëáüëá",
            parse_mode="Markdown"
        )
        return
    
    if amount < min_amount or amount > max_amount:
        await message.answer(
            f"*–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {min_amount} –¥–æ {max_amount}{currency_symbol}*\n\n"
            f"*The amount must be from: {min_amount} to: {max_amount}{currency_symbol}*\n\n"
            f"üëáüëáüëá",
            parse_mode="Markdown"
        )
        return
    
    flow_data = calculate_flow_data(amount, currency)
    await state.update_data(flow_data=flow_data)
    await state.set_state(GrowingFlowState.confirming_amount)
    
    message_text = format_confirmation_message(flow_data)
    await message.answer(
        message_text,
        reply_markup=get_confirm_amount_keyboard(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—É–º–º—ã
@router.callback_query(GrowingFlowState.confirming_amount, F.data == "confirm_amount")
async def confirm_amount(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    flow_data = data.get("flow_data")
    
    print(f"\n[–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï] –î–µ–Ω—å: {flow_data.day_counter}")
    print(f"–°—É–º–º–∞ –≤ –ø–æ—Ç–æ–∫–µ –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: {flow_data.total_amount:.2f}")
    print(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: {flow_data.daily_income:.2f}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ –∫–æ–ø–∏–ª–∫—É
    flow_data.savings = flow_data.daily_income
    
    # –£–º–µ–Ω—å—à–∞–µ–º —Å—É–º–º—É –≤ –ø–æ—Ç–æ–∫–µ
    flow_data.total_amount -= flow_data.daily_income
    
    # –í–∞–∂–Ω–æ: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–ø–æ–∑–∏—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    # –ú—ã –¥–æ–ª–∂–Ω—ã —É–º–µ–Ω—å—à–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ –µ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
    for i, deposit in enumerate(flow_data.deposits):
        daily_income = deposit["daily_income"]
        
        # –£–º–µ–Ω—å—à–∞–µ–º –±–æ–Ω—É—Å–Ω—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ –µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
        deposit["bonus_amount"] -= daily_income
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        deposit["percent"] += 0.01
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
        deposit["daily_income"] = deposit["bonus_amount"] * (deposit["percent"] / 100)
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–∞–∫ —Å—É–º–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –≤—Å–µ—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    new_total_income = 0
    for deposit in flow_data.deposits:
        new_total_income += deposit["daily_income"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    flow_data.daily_income = round(new_total_income * 100) / 100
    
    # –í –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 0.31%
    flow_data.income_percent = 0.31
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"[–ü–û–°–õ–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø] –î–µ–Ω—å: {flow_data.day_counter}")
    print(f"–°—É–º–º–∞ –≤ –ø–æ—Ç–æ–∫–µ: {flow_data.total_amount:.2f}")
    print(f"–ù–æ–≤–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: {flow_data.daily_income:.2f}")
    print(f"–ö–æ–ø–∏–ª–∫–∞: {flow_data.savings:.2f}")
    
    await state.update_data(flow_data=flow_data)
    await state.set_state(GrowingFlowState.viewing_flow)
    
    message_text = format_daily_stats(flow_data)
    keyboard = get_flow_control_with_withdraw_keyboard() if flow_data.savings > 0 else get_flow_control_keyboard()
    
    await callback.message.answer(
        message_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–ê–ß–ò–°–õ–ò–¢–¨"
@router.callback_query(GrowingFlowState.viewing_flow, F.data == "add_income")
async def add_income(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    flow_data = data.get("flow_data")
    
    print(f"\n[–ù–ê–ß–ò–°–õ–ï–ù–ò–ï] –î–µ–Ω—å: {flow_data.day_counter}")
    print(f"–°—É–º–º–∞ –≤ –ø–æ—Ç–æ–∫–µ –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: {flow_data.total_amount:.2f}")
    print(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: {flow_data.daily_income:.2f}")
    print(f"–ö–æ–ø–∏–ª–∫–∞ –¥–æ: {flow_data.savings:.2f}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ –∫–æ–ø–∏–ª–∫—É
    flow_data.savings += flow_data.daily_income
    
    # –£–º–µ–Ω—å—à–∞–µ–º —Å—É–º–º—É –≤ –ø–æ—Ç–æ–∫–µ
    flow_data.total_amount -= flow_data.daily_income
    
    # –í–∞–∂–Ω–æ: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–ø–æ–∑–∏—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    # –ú—ã –¥–æ–ª–∂–Ω—ã —É–º–µ–Ω—å—à–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ –µ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
    for i, deposit in enumerate(flow_data.deposits):
        daily_income = deposit["daily_income"]
        
        # –£–º–µ–Ω—å—à–∞–µ–º –±–æ–Ω—É—Å–Ω—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ –µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
        deposit["bonus_amount"] -= daily_income
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        deposit["percent"] += 0.01
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
        deposit["daily_income"] = deposit["bonus_amount"] * (deposit["percent"] / 100)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π
    flow_data.day_counter += 1
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–∞–∫ —Å—É–º–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –≤—Å–µ—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    new_total_income = 0
    for deposit in flow_data.deposits:
        new_total_income += deposit["daily_income"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    flow_data.daily_income = round(new_total_income * 100) / 100
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏)
    if flow_data.total_amount > 0:
        avg_percent = 0
        deposit_count = len(flow_data.deposits)
        if deposit_count > 0:
            avg_percent = sum(deposit["percent"] for deposit in flow_data.deposits) / deposit_count
        flow_data.income_percent = avg_percent
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"[–ü–û–°–õ–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø] –î–µ–Ω—å: {flow_data.day_counter}")
    print(f"–°—É–º–º–∞ –≤ –ø–æ—Ç–æ–∫–µ: {flow_data.total_amount:.2f}")
    print(f"–ù–æ–≤–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: {flow_data.daily_income:.2f}")
    print(f"–ö–æ–ø–∏–ª–∫–∞ –ø–æ—Å–ª–µ: {flow_data.savings:.2f}")
    print(f"–°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {flow_data.income_percent:.2f}%")
    
    await state.update_data(flow_data=flow_data)
    
    message_text = format_daily_stats(flow_data)
    keyboard = get_flow_control_with_withdraw_keyboard() if flow_data.savings > 0 else get_flow_control_keyboard()
    
    await callback.message.answer(
        message_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–´–í–ï–°–¢–ò"
@router.callback_query(GrowingFlowState.viewing_flow, F.data == "withdraw")
async def prompt_withdraw(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞
    data = await state.get_data()
    flow_data = data.get("flow_data")
    
    if flow_data.savings <= 0:
        await callback.answer("–í –∫–æ–ø–∏–ª–∫–µ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ | There are no funds in the savings for withdrawal")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ | Withdraw all", callback_data="withdraw_all")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ | Cancel", callback_data="cancel_withdraw")]
    ])
    
    currency_symbol = CURRENCY_SYMBOLS[flow_data.currency]
    await callback.message.answer(
        f"*–í –∫–æ–ø–∏–ª–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ: {flow_data.savings:.2f}{currency_symbol}*\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ'\n\n"
        f"*Available in the savings: {flow_data.savings:.2f}{currency_symbol}*\n"
        f"*Enter the amount to withdraw or click 'Withdraw all'*\n\n"
        f"üëáüëáüëá",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await state.set_state(GrowingFlowState.withdrawing_funds)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ"
@router.callback_query(GrowingFlowState.withdrawing_funds, F.data == "withdraw_all")
async def handle_withdraw_all(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞
    data = await state.get_data()
    flow_data = data.get("flow_data")
    
    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
    all_savings = flow_data.savings
    flow_data = withdraw_savings(flow_data, all_savings)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(flow_data=flow_data)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Ç–æ–∫–∞
    await state.set_state(GrowingFlowState.viewing_flow)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    message_text = format_daily_stats(flow_data)
    keyboard = get_flow_control_keyboard()
    
    await callback.message.answer(
        f"*–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã!*\n\n{message_text}\n\n"
        f"*Funds successfully withdrawn!*\n\n{message_text}\n\n"
        f"üëáüëáüëá",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
@router.callback_query(GrowingFlowState.withdrawing_funds, F.data == "cancel_withdraw")
async def handle_cancel_withdraw(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞
    data = await state.get_data()
    flow_data = data.get("flow_data")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Ç–æ–∫–∞
    await state.set_state(GrowingFlowState.viewing_flow)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    message_text = format_daily_stats(flow_data)
    keyboard = get_flow_control_with_withdraw_keyboard() if flow_data.savings > 0 else get_flow_control_keyboard()
    
    await callback.message.answer(message_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
@router.message(GrowingFlowState.withdrawing_funds)
async def handle_withdraw_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.strip().replace(" ", ""))
    except ValueError:
        await message.answer("*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ | Please enter a valid number*\n\n"
        f"üëáüëáüëá",
        parse_mode="Markdown"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞
    data = await state.get_data()
    flow_data = data.get("flow_data")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–≤–µ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É
        flow_data = withdraw_savings(flow_data, amount)
    except ValueError as e:
        await message.answer(str(e))
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(flow_data=flow_data)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Ç–æ–∫–∞
    await state.set_state(GrowingFlowState.viewing_flow)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    message_text = format_daily_stats(flow_data)
    keyboard = get_flow_control_with_withdraw_keyboard() if flow_data.savings > 0 else get_flow_control_keyboard()
    
    await message.answer(
        f"*–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã!*\n\n{message_text}\n\n"
        f"*Funds successfully withdrawn!*\n\n{message_text}\n\n"
        f"üëáüëáüëá",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–û–ü–û–õ–ù–ò–¢–¨"
@router.callback_query(GrowingFlowState.viewing_flow, F.data == "add_funds")
async def prompt_add_funds(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GrowingFlowState.adding_funds)  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –†–∞—Å—Ç—É—â–µ–≥–æ –ü–æ—Ç–æ–∫–∞.\n"
        f"*–¶–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –æ—Ç: {MIN_AMOUNT} –¥–æ: {MAX_AMOUNT}*\n\n"
        f"Enter the amount to replenish the Growing Flow.\n"
        f"*In numbers without spaces from: {MIN_AMOUNT} to: {MAX_AMOUNT}*\n\n"
        f"üëáüëáüëá",
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
@router.message(GrowingFlowState.adding_funds)
async def handle_additional_amount(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
    data = await state.get_data()
    flow_data = data.get("flow_data")
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∞–ª—é—Ç—ã
    currency = flow_data.currency
    currency_limits = CURRENCY_LIMITS[currency]
    min_amount = currency_limits["min"]
    max_amount = currency_limits["max"]
    currency_symbol = CURRENCY_SYMBOLS[currency]
    
    try:
        amount = float(message.text.strip().replace(" ", ""))
        if amount < min_amount or amount > max_amount:
            await message.answer(
                f"*–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {min_amount} –¥–æ {max_amount}{currency_symbol}*\n\n"
                f"*The amount must be from: {min_amount} to: {max_amount}{currency_symbol}*\n\n"
                f"üëáüëáüëá",
                parse_mode="Markdown"
            )
            return
    except ValueError:
        await message.answer(
            f"*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –æ—Ç {min_amount} –¥–æ {max_amount}{currency_symbol}*\n\n"
            f"*Please enter a valid number without spaces from: {min_amount} to: {max_amount}{currency_symbol}*\n\n"
            f"üëáüëáüëá",
            parse_mode="Markdown"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É –≤ –ø–æ—Ç–æ–∫–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_total = flow_data.total_amount
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å—É–º–º—ã
    bonus_percent = get_bonus_percent(amount, currency)
    display_percent = (bonus_percent - 1) * 100
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ECR –¥–ª—è –Ω–æ–≤–æ–π —Å—É–º–º—ã
    bonus_amount = amount * (display_percent / 100)
    bonus_rub = convert_to_rub(bonus_amount, currency)
    ecr_count = get_ecr_count_for_amount(bonus_rub)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∫ –ø–æ—Ç–æ–∫—É
    flow_data = add_funds_to_flow(flow_data, amount)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(flow_data=flow_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    confirmation_message = (
        f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! | Deposit successful! üí∞\n\n"
        f"–ü–æ–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ —Å—É–º–º—É: | Deposit amount: *{amount:.2f}*{currency_symbol}\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è: | Multiplication percentage: *{display_percent:.0f}*%\n"
        f"–ö–æ–ª-–≤–æ ECR: | ECR amount: *{ecr_count:.2f}* ECR\n"
        f"–°—É–º–º–∞ —Å –±–æ–Ω—É—Å–æ–º: | Amount with bonus: *{amount * bonus_percent:.2f}*{currency_symbol}\n"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
    await message.answer(
        confirmation_message,
        parse_mode="Markdown"
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message_text = format_daily_stats(flow_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await message.answer(
        message_text,
        reply_markup=get_flow_control_with_withdraw_keyboard() if flow_data.savings > 0 else get_flow_control_keyboard(),
        parse_mode="Markdown"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º
    await state.set_state(GrowingFlowState.viewing_flow)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–ê–ù–û–í–û"
@router.callback_query(F.data == "restart")
async def restart_simulator(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(GrowingFlowState.selecting_currency)
    
    await callback.message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:*\n\n"
        "*Select the currency:*\n\n"
        "üëáüëáüëá",
        reply_markup=get_currency_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "money_flows")
async def show_money_flows(callback: CallbackQuery):
    await callback.message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:*\n\n"
        "*Select the type of money flow:*\n\n"
        "üëáüëáüëá",
        reply_markup=get_money_flows_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "lucky_flow")
async def lucky_flow(callback: CallbackQuery):
    lucky_flow_text = (
       "https://t.me/potokcashi/18"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(lucky_flow_text)
    await callback.answer()

@router.callback_query(F.data == "savings_flow")
async def savings_flow(callback: CallbackQuery):
    savings_flow_text = (
        "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ü–æ—Ç–æ–∫ (–ù–ü) - —ç—Ç–æ –ø–æ—Ç–æ–∫ –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –µ–∂–µ–º–µ—Å—è—á–Ω–æ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–æ—Ç 3 –¥–æ 25 –ª–µ—Ç). –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥ –≤—ã–ø–ª–∞—Ç - –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã—Ö –≤–æ –º–Ω–æ–≥–æ —Ä–∞–∑ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–æ–¥—Ç—è–∂–∫–µ eCurrency.\n\n"
        "–°—É–º–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –≤ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ü–æ—Ç–æ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ —Å—É–º–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞: —á–µ–º –±–æ–ª—å—à–µ –∏ —Ç–æ –∏ –¥—Ä—É–≥–æ–µ, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏—É–º–Ω–æ–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤.\n\n"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(savings_flow_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –ø–æ–¥–ø–∏—Å–∏
    try:
        from aiogram.types import FSInputFile
        image_path = "images/accumulative_flow.jpg"
        photo = FSInputFile(image_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await callback.message.answer_photo(
            photo=photo,
            caption="–°—Ö–µ–º–∞ —Ä–∞–±–æ—Ç—ã –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ü–æ—Ç–æ–∫–∞ | Scheme of work of the Savings Flow"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é
    try:
        await callback.message.answer_video(
            video="https://t.me/potokcashi/17",
            caption="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–º –ü–æ—Ç–æ–∫–µ | More about the Savings Flow"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await callback.message.answer(
            "üìπ –í–∏–¥–µ–æ –æ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–º –ü–æ—Ç–æ–∫–µ: https://t.me/potokcashi/17\n\n"
            "üìπ More about the Savings Flow: https://t.me/potokcashi/17"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é
    try:
        await callback.message.answer_video(
            video="https://t.me/potokcashi/48",
            caption="–ï—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –æ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–º –ü–æ—Ç–æ–∫–µ | Another video about the Savings Flow"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await callback.message.answer(
            "üìπ –ï—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –æ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–º –ü–æ—Ç–æ–∫–µ: https://t.me/potokcashi/48\n\n"
            "üìπ Another video about the Savings Flow: https://t.me/potokcashi/48"
        )
    
    await callback.answer()

@router.callback_query(F.data == "super_fast_flow")
async def super_fast_flow(callback: CallbackQuery):
    super_fast_flow_text = (
        "–°—É–ø–µ—Ä –ë—ã—Å—Ç—Ä—ã–π –ü–æ—Ç–æ–∫ (–°–ë–ü) - —ç—Ç–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å —É–∂–µ —á–µ—Ä–µ–∑ 15 –¥–Ω–µ–π.\n\n"
        "–ü–æ—Ç–æ–∫ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É. –í–Ω–µ—Å–µ–Ω–Ω–∞—è —Å—É–º–º–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∑–∞ —Å—á–µ—Ç –ø–æ–¥—Ç—è–∂–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ECR –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 15 –¥–Ω–µ–π –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π —Ü–µ–ª–∏–∫–æ–º, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –¥–Ω—è –≤—ã–≤–æ–¥–∞.\n\n"
        "5000 ‚Äî +10.1%\n"
        "10 000 ‚Äî +7.1%\n"
        "25 000 ‚Äî +5.9%\n"
        "45 000 ‚Äî +5.6%\n"
        "50 000 ‚Äî +5.6%\n"
        "55 000 ‚Äî +5.3%\n"
        "70 000 ‚Äî +5%\n"
        "75 000 ‚Äî +5%\n"
        "100 000 ‚Äî +4.4%\n"
        "110 000 ‚Äî +4.4%\n"
        "130 000 ‚Äî +4.4%\n"
        "140 000 ‚Äî +4.4%\n"
        "170 000 ‚Äî +4.1%\n"
        "250 000 ‚Äî +4.1%\n"
        "500 000 ‚Äî +3.5%\n"
        "750 000 ‚Äî +3%\n"
        "1 000 000 ‚Äî +2.6%\n\n"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(super_fast_flow_text)
    await callback.answer()

@router.callback_query(F.data == "fast_flow_real")
async def fast_flow_real(callback: CallbackQuery):
    fast_flow_text = (
        "–ë—ã—Å—Ç—Ä—ã–π –ü–æ—Ç–æ–∫ (–ë–ü) - —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å –º–µ–Ω–µ–µ, —á–µ–º —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü —Å –Ω–∞—á–∞–ª–∞ —É—á–∞—Å—Ç–∏—è.\n\n"
        "–ü–æ—Ç–æ–∫ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É. –í–Ω–µ—Å–µ–Ω–Ω–∞—è —Å—É–º–º–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∑–∞ —Å—á–µ—Ç –ø–æ–¥—Ç—è–∂–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ECR –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Ä–∞–≤–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏.\n\n"
        "–≠—Ç–∏ –≤—ã–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∫ –≤—ã–≤–æ–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(fast_flow_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é
    try:
        await callback.message.answer_video(
            video="https://t.me/potokcashi/4",
            caption="–í–∏–¥–µ–æ –æ –ë—ã—Å—Ç—Ä–æ–º –ü–æ—Ç–æ–∫–µ"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await callback.message.answer(
            "üìπ –í–∏–¥–µ–æ –æ –ë—ã—Å—Ç—Ä–æ–º –ü–æ—Ç–æ–∫–µ: https://t.me/potokcashi/4"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é
    try:
        await callback.message.answer_video(
            video="https://t.me/potokcashi/45",
            caption="–ï—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –æ –ë—ã—Å—Ç—Ä–æ–º –ü–æ—Ç–æ–∫–µ | Another video about the Fast Flow"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await callback.message.answer(
            "üìπ –ï—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –æ –ë—ã—Å—Ç—Ä–æ–º –ü–æ—Ç–æ–∫–µ: https://t.me/potokcashi/45\n\n"
            "üìπ Another video about the Fast Flow: https://t.me/potokcashi/45"
        )
    
    await callback.answer()

@router.callback_query(F.data == "growing_flow_real")
async def growing_flow_real(callback: CallbackQuery):
    growing_flow_text = (
        "–†–∞—Å—Ç—É—â–∏–π –ü–æ—Ç–æ–∫ (–†–ü) - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–π –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º.\n\n"
        "–°–¥–µ–ª–∞–Ω–Ω—ã–π –≤–∑–Ω–æ—Å –º–æ–∂–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∑–∞ —Å—á–µ—Ç –ø–æ–¥—Ç—è–∂–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ECR, –ø—Ä–∏—á—ë–º –ø–æ –∫—É—Ä—Å—É, –∫–æ—Ç–æ—Ä—ã–π –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π. –í –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–∞ –≤–Ω–µ—Å–µ–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 0.3% –ø—Ä–µ–º–∏–∏, –∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø—Ä–µ–º–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Ä–∞—Å—Ç–µ—Ç –Ω–∞ 0.01%.\n\n"
        "–¢–∞–∫–∂–µ –†–∞—Å—Ç—É—â–∏–π –ü–æ—Ç–æ–∫ –º–æ–∂–Ω–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∑–∞ —Å—á–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.\n\n"
        "–ü—Ä–∏ —Ä–∞–∑—É–º–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–º–∏–∏ –∏ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –†–∞—Å—Ç—É—â–∏–π –ü–æ—Ç–æ–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–æ—Å—Ç –í–∞—à–µ–≥–æ –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è!\n\n"
        "–°—É–º–º–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ECR, –∑–∞ —Å—á–µ—Ç –ø–æ–¥—Ç—è–∂–∫–∏ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –≤–∑–Ω–æ—Å, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
        "–æ—Ç 1000 ‚Äî +50%\n"
        "–æ—Ç 5000 ‚Äî +75%\n"
        "–æ—Ç 10 000 ‚Äî +100%\n"
        "–æ—Ç 50 000 ‚Äî +125%\n"
        "–æ—Ç 100 000 ‚Äî +150%\n"
        "–æ—Ç 500 000 ‚Äî +175%\n"
        "–æ—Ç 1 000 000 ‚Äî +200%"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(growing_flow_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é
    try:
        await callback.message.answer_video(
            video="https://t.me/potokcashi/16",
            caption="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –†–∞—Å—Ç—É—â–µ–º –ü–æ—Ç–æ–∫–µ | More about the Growing Flow"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await callback.message.answer(
            "üìπ –í–∏–¥–µ–æ –æ –†–∞—Å—Ç—É—â–µ–º –ü–æ—Ç–æ–∫–µ: https://t.me/potokcashi/16\n\n"
            "üìπ More about the Growing Flow: https://t.me/potokcashi/16"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é
    try:
        await callback.message.answer_video(
            video="https://t.me/potokcashi/47",
            caption="–ï—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –æ –†–∞—Å—Ç—É—â–µ–º –ü–æ—Ç–æ–∫–µ | Another video about the Growing Flow"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await callback.message.answer(
            "üìπ –ï—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –æ –†–∞—Å—Ç—É—â–µ–º –ü–æ—Ç–æ–∫–µ: https://t.me/potokcashi/47\n\n"
            "üìπ Another video about the Growing Flow: https://t.me/potokcashi/47"
        )
    
    await callback.answer()

@router.callback_query(F.data == "start_flow")
async def start_flow(callback: CallbackQuery):
    start_flow_text = (
        "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ü–æ—Ç–æ–∫ (–°–ü) - —ç—Ç–æ –Ω–µ –∏–º–µ—é—â–∞—è –∞–Ω–∞–ª–æ–≥–æ–≤, –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–∏–∑–≤–∞–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∏–º –ª–µ–≥–∫–∏–π, –±—ã—Å—Ç—Ä—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã–≥–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç, –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –æ–±—É—á–∞—è –≤—Å–µ–º –Ω—é–∞–Ω—Å–∞–º —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ü–æ—Ç–æ–∫Cash.\n\n"
        "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ü–æ—Ç–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—É–º–º—É.\n\n"
        "–ü–æ—Ç–æ–∫–∏ –ª—é–±–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –æ–±—â–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–µ: —ç—Ç–æ –ø–æ—Ç–æ–∫–∏ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –¥–≤–∞–∂–¥—ã –≤ –º–µ—Å—è—Ü.\n\n"
        "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–∫–∞ –∑–∞ 20 –ø–µ—Ä–∏–æ–¥–æ–≤ (10 –º–µ—Å—è—Ü–µ–≤) —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –∑–∞ —Å—á–µ—Ç –ø–æ–¥—Ç—è–∂–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã eCurrency (ECR) –ø–æ –ª—å–≥–æ—Ç–Ω–æ–º—É –∫—É—Ä—Å—É (–°–£–©–ï–°–¢–í–ï–ù–ù–û –≤—ã—à–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ).\n\n"
        "–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–∏–Ω–∞–ª–∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ü–æ—Ç–æ–∫, eCurrency –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –ø–æ —Ä–∞–∑–Ω–æ–º—É –∫—É—Ä—Å—É, —á–µ–º –±–æ–ª—å—à–µ –Ω–æ–º–∏–Ω–∞–ª –ø–æ—Ç–æ–∫–∞, —Ç–µ–º –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–π –∫—É—Ä—Å.\n\n"
        "–ü–æ –ø—Ä–æ—à–µ—Å—Ç–≤–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ–¥–µ–ª—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ü–æ—Ç–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—É–º–º—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
        "–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ü–æ—Ç–æ–∫ (–£–°–ü) - —ç—Ç–æ –ø–æ–¥–≤–∏–¥ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ü–æ—Ç–æ–∫ - –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –∏ –µ—â—ë –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–π.\n\n"
        "–ì–ª–∞–≤–Ω–æ–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å—é –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ü–æ—Ç–æ–∫ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ, —á—Ç–æ –≤—ã –æ–¥–Ω–æ–º–æ–º–µ–Ω—Ç–Ω–æ –≤–Ω–æ—Å–∏—Ç–µ —Å—É–º–º—É –µ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞ –≤ 4-—Ö –∫—Ä–∞—Ç–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ –∏ —É–∂–µ —Å –ø–µ—Ä–≤–æ–π –≤—ã–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –Ω–æ–º–∏–Ω–∞–ª –ø–æ—Ç–æ–∫–∞, –∫–∞–∫ –±—É–¥—Ç–æ –Ω–∞—á–∞–ª—Å—è –Ω–µ 1-–π –∞ 6-–π –ø–µ—Ä–∏–æ–¥, –∞ 5 –≤—ã –ø—Ä–æ—Å–∫–æ—á–∏–ª–∏.\n\n"
        "–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤—ã –¥–≤–∞–∂–¥—ã –≤ –º–µ—Å—è—Ü –ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ –µ–≥–æ –Ω–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Å—É–º–º—É, –∏ –∫–∞–∂–¥–∞—è –ø–æ—Å–ª–µ–¥—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π, —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ü–æ—Ç–æ–∫."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(start_flow_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é
    try:
        await callback.message.answer_video(
            video="https://t.me/potokcashi/5",
            caption="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –°—Ç–∞—Ä—Ç–æ–≤–æ–º –ü–æ—Ç–æ–∫–µ | Additional information about the Start Flow"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await callback.message.answer(
            "üìπ –í–∏–¥–µ–æ –æ –°—Ç–∞—Ä—Ç–æ–≤–æ–º –ü–æ—Ç–æ–∫–µ: https://t.me/potokcashi/5\n\n"
            "üìπ Additional information about the Start Flow: https://t.me/potokcashi/5"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é
    try:
        await callback.message.answer_video(
            video="https://t.me/potokcashi/46",
            caption="–ï—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –æ –°—Ç–∞—Ä—Ç–æ–≤–æ–º –ü–æ—Ç–æ–∫–µ | Another video about the Start Flow"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await callback.message.answer(
            "üìπ –ï—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –æ –°—Ç–∞—Ä—Ç–æ–≤–æ–º –ü–æ—Ç–æ–∫–µ: https://t.me/potokcashi/46\n\n"
            "üìπ Another video about the Start Flow: https://t.me/potokcashi/46"
        )
    
    await callback.answer()

@router.callback_query(F.data == "fund_registration")
async def fund_registration(callback: CallbackQuery):
    registration_text = (
        "–ú–û–Ø 1-—è –õ–ò–ù–ò–Ø –ò –õ–ò–ß–ù–û–ï –°–û–ü–†–û–í–û–ñ–î–ï–ù–ò–ï –ù–ê –í–°–ï–• –ü–õ–ê–¢–§–û–†–ú–ê–• üëáüòâ\n\n"
        "‚ÄºÔ∏è–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ –≤–∫–ª. VPN üëá\n\n"
        "üá∑üá∫ –†–§ –∏ –°–ù–ì ‚Äî https://potok.cash/ref/HPLTzKyq\n"
        "üá™üá∫ EURO ‚Äî https://eur.cashflow.fund/ref/ncPTzKyq\n"
        "üá™üá∏ –ò—Å–ø–∞–Ω–∏—è ‚Äî https://es.cashflow.fund/ref/nmbTzKyq\n"
        "üáµüá± –ü–æ–ª—å—à–∞ ‚Äî https://pl.cashflow.fund/ref/3sHTzKyq\n"
        "üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω ‚Äî https://cashflow-kg.fund/ref/XsPTzKyq\n"
        "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è ‚Äî https://gb.cashflow.fund/ref/XZbTzKyq\n"
        "üá®üá≥ –ö–∏—Ç–∞–π ‚Äî https://cn.cashflow.fund/ref/XsbTzKyq\n\n"
        "‚ÄºÔ∏è–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É ü§ùüòéüëá\n\n"
        "–ú–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º ‚Äî https://t.me/konvict171\n"
        "–ì–æ—Å—Ç–µ–≤–æ–π —á–∞—Ç ‚Äî https://t.me/potokcashchat\n\n"
        "–§–∏–ª–æ—Å–æ—Ñ–∏—è –î–º–∏—Ç—Ä–∏—è –í–∞—Å–∞–¥–∏–Ω–∞ ‚Äî https://t.me/kodvasadin"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(registration_text)
    await callback.answer()

@router.callback_query(F.data == "fund_deposit")
async def fund_deposit(callback: CallbackQuery):
    deposit_text = (
        "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –°–±–µ—Ä–∫–∞—Å—Å—ã & Money Storage —á–µ—Ä–µ–∑ üì± CryptoBot (https://t.me/send?start=r-yfe2e)\n\n"
        "‚ùå –ë–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π –∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n\n"
        "‚úÖ–ë—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ\n\n"
        "‚úÖ–û—Ç 1000‚ÇΩ\n\n"
        "‚úÖ–° –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω—ã\n\n"
        "üá∏üáß ‚úÖ üëΩ üíß üá∏üáßüîÑ üí≤\n\n"
        "–°—Å—ã–ª–∫–∞ –Ω–∞ üëâ P2P –ú–∞—Ä–∫–µ—Ç (https://t.me/send?start=r-yfe2e-market) üëà –∂–º–∏ —Å—é–¥–∞"

        "Deposit to Sberbank & Money Storage through üì± CryptoBot (https://t.me/send?start=r-yfe2e)\n\n"
        "‚ùå No verifications and blockages\n\n"
        "‚úÖ Fast and easy\n\n"
        "‚úÖ From 1000‚ÇΩ\n\n"
        "‚úÖ From any country's bank card\n\n"
        "üá∏üáß ‚úÖ üëΩ üíß üá∏üáßüîÑ üí≤\n\n"
        "Link to üëâ P2P Market (https://t.me/send?start=r-yfe2e-market) üëà click here"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(deposit_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    try:
        await callback.message.answer_video(
            video="https://t.me/potokcashi/131",
            caption="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é | Deposit instructions"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        await callback.message.answer(
            "üìπ –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: https://t.me/potokcashi/131\n\n"
            "üìπ Video instructions: https://t.me/potokcashi/131"
        )
    
    await callback.answer()

@router.callback_query(F.data == "fund_withdrawal")
async def fund_withdrawal(callback: CallbackQuery):
    withdrawal_text = (
        "–í–´–í–û–î –∏–∑ –°–±–µ—Ä–∫–∞—Å—Å—ã –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ üì± CryptoBot (https://t.me/send?start=r-yfe2e)\n\n"
        "üõ°Ô∏è–ë–µ–∑–æ–ø–∞—Å–Ω–æ\n\n"
        "üíµ üîÑ üá∏üáß ‚úÖ üëΩ üíß üá∏üáß\n\n"
        "–°—Å—ã–ª–∫–∞ –Ω–∞ üëâ P2P –ú–∞—Ä–∫–µ—Ç (https://t.me/send?start=r-yfe2e-market) üëà –∂–º–∏ —Å—é–¥–∞"

        "Withdrawal from Sberbank to bank card through üì± CryptoBot (https://t.me/send?start=r-yfe2e)\n\n"
        "üõ°Ô∏èSafe\n\n"
        "üíµ üîÑ üá∏üáß ‚úÖ üëΩ üíß üá∏üáß\n\n"
        "Link to üëâ P2P Market (https://t.me/send?start=r-yfe2e-market) üëà click here"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(withdrawal_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    try:
        await callback.message.answer_video(
            video="https://t.me/potokcashi/132",
            caption="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤—ã–≤–æ–¥—É | Withdrawal instructions"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        await callback.message.answer(
            "üìπ –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: https://t.me/potokcashi/132\n\n"
            "üìπ Video instructions: https://t.me/potokcashi/132"
        )
    
    await callback.answer()

@router.callback_query(F.data == "buy_ecurrency")
async def buy_ecurrency(callback: CallbackQuery):
    ecurrency_text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∫—É–ø–∫–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã eCurrency: | Instruction for buying eCurrency:"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(ecurrency_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    try:
        await callback.message.answer_video(
            video="https://t.me/potokcashi/102",
            caption="–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è | Video instruction"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        await callback.message.answer(
            "üìπ –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: https://t.me/potokcashi/102\n\n"
            "üìπ Video instruction: https://t.me/potokcashi/102"
        )
    
    await callback.answer()

@router.callback_query(F.data == "social_networks")
async def show_social_networks(callback: CallbackQuery):
    social_networks_text = (
        "–ü–û–î–ü–ò–°–´–í–ê–ô–¢–ï–°–¨ –ò –î–û–ë–ê–í–õ–Ø–ô–¢–ï–°–¨ –í –î–†–£–ó–¨–Ø üòâ\n\n"
        "üëáüëáüëá\n\n"
        "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ (2000 + –¥—Ä—É–∑–µ–π) ‚Äî https://vk.com/buisness25\n\n"
        "–ì–æ—Å—Ç–µ–≤–æ–π —á–∞—Ç ‚Äî https://t.me/matusevich_vpotoke\n\n"
        "YouTube –∫–∞–Ω–∞–ª (10 000+ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤) ‚Äî https://www.youtube.com/@matusevich17\n\n"
        "–ö–∞–Ω–∞–ª –ö–æ–¥ –í–∞—Å–∞–¥–∏–Ω–∞ ‚Äî https://t.me/kodvasadin\n\n"
    )
    
    await callback.message.answer(
        social_networks_text,
        reply_markup=get_main_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    await callback.message.answer(
        "–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n"
        "The help section is under development. It will be available soon!",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
@router.message(Command('rates'))
async def cmd_rates(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ ECR | Show the current exchange rates and ECR"""
    rates_text = "üí± –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç | Current exchange rates:\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å ECR –≤ —Ä—É–±–ª—è—Ö
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ ECR –≤ —Ä—É–±–ª—è—Ö
        ecr_rub = get_ecr_rub_rate() or ECR_SELL_RATE
        rates_text += f"üîπ ECR (–∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º) | ECR (user purchase rate): {ecr_rub:.2f}‚ÇΩ\n\n"
        
 
    except Exception as e:
        rates_text += f"üîπ ECR (–∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º) | ECR (user purchase rate): {ECR_SELL_RATE:.2f}‚ÇΩ\n\n"
       
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    currency_rates = get_cbr_currency_rates()
    if currency_rates and "USD" in currency_rates:
        rates_text += f"üá∫üá∏ USD: {currency_rates['USD']:.4f}‚ÇΩ –∑–∞ 1$\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    for currency, rate in CURRENCY_RATES.items():
        if currency not in ["RUB", "USD"]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä—É–±–ª—å –∏ USD (—É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –≤—ã—à–µ)
            symbol = CURRENCY_SYMBOLS[currency]
            rates_text += f"{CURRENCY_FLAGS.get(currency, '')} {currency}: {rate:.4f}‚ÇΩ –∑–∞ 1{symbol}\n"
    
    await message.answer(rates_text)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤, —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
@router.callback_query(F.data.in_([]))
async def money_flow_placeholder(callback: CallbackQuery):
    flow_names = {}
    
    flow_name = flow_names.get(callback.data, "–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ | Selected flow")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"–†–∞–∑–¥–µ–ª ¬´{flow_name}¬ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n"
            f"The section ¬´{flow_name}¬ª is under development. It will be available soon!",
            reply_markup=get_money_flows_menu()
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —Ç–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except Exception:
            pass
            
        await callback.message.answer(
            f"–†–∞–∑–¥–µ–ª ¬´{flow_name}¬ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n"
            f"The section ¬´{flow_name}¬ª is under development. It will be available soon!",
            reply_markup=get_money_flows_menu()
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–£–†–° –í–ê–õ–Æ–¢"
@router.callback_query(F.data == "show_currency_rates")
async def show_currency_rates(callback: CallbackQuery):
    try:
        await cmd_rates(callback.message)
        await callback.answer()
    except Exception as e:
        logging.error(f"Error in show_currency_rates: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer() 